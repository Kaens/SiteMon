[Main]
# The continuity file saves last check dates and last tracked element values. Optional, defaults to ./sitemon.json
Ð¡ontinuityFile = ./sitemon.json

# The report file is like a log file but just for the updates. Contains Pages (see below) and timestamps in the ISO-8601 format. Put "nul" to skip. Optional, defaults to ./sitemon.report.txt
ReportFile = ./sitemon.report.txt

# This specifies the amount of retries whilst loading a page. Optional, defaults to 3
# Put -1 for infinite retries. 
Retries = 3

# Optional, defaults to Microsoft Edge Version 102.0.1245.41 win-x64 official
UserAgent = Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.124 Safari/537.36 Edg/102.0.1245.41
#ini chapter names here, also used throughout the script's output.
Pages = deflemask, sunvox, python


[deflemask]
# Use the most common, short URL. Won't work with passworded pages.
URL = https://deflemask.itch.io/windows

# Render the page via loading JS? Takes time and 140M of disk space but might be required for your page. Optional, defaults to no.
JS = no

# The usual Referer header. Optional, defaults to an empty string.
Referer = 

#Verify the secure connection for issues. Optional, defaults to no.
VerifySSL = no

#Types can be "css", "xpath" or "regex".
# The first matched element is compared to its older version.
Type = xpath

# If in doubt, try to "Copy full Xpath" in your browser's Inspector, paste here. But normally, there are better ways.
# in this case, this should track the DeFleMask for Windows' version
Search = //div[contains(@class,'upload_name')]

# Sometimes you need to track the changes in an element's attribute, not the text contents. If you specify the attribute name here, SiteMon will be keeping track on it instead. Optional, applies to CSS and Xpath modes because you can do that with RegEx anyway.
#Attribute = href

# In case the page has several update footprints, like the various independently updated versions of Python, you might want to keep track of a bunch of similar elements at once.
# "Amount" gives you the option to tell up to how many search results to store in the continuity, starting from the very first element found.
#Optional, defaults to 1 (and cannot be less). See [python] for an example, and play around with SelTest to see how it works.
#Amount = 1

# Frequency, to avoid badgering the sites too much, even if you loop the script every second.
# In minutes (integer), <=0 for never.
# 60 is 1 h, 1440 is 1 d, 10080 is 1 w
Frequency = 1

[sunvox]
#This will return something like "sunvox-2.0e.zip"
URL = https://warmplace.ru/soft/sunvox/
Type = css
Search = a.download_link
Attr = href
Frequency = 10000

[python]
#This will return something like "Python 3.10.5 Python 3.10.5... 3.9.13 ... 3.10.4 ... 3.9.12"
URL = https://www.python.org/downloads/
JS = no
Referer = https://www.python.org/
VerifySSL = yes
Type = regex
Search = Python 3\.\d*\.\d*
Amount = 8
Frequency = 10000
